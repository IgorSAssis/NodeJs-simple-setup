--> instalar os @types para o typescript sempre como dependencia de desenvolvimento

================= Typescript
-> instalar o typescript como dependência de desenvolvimento.
yarn add typescript -D

-> Criar o arquivo de configuração do typescript
yarn tsc --init

-> Junção do tsc (converte código Typescript em javascript), node e nodemon
yarn add ts-node-dev -D

-> Flags para adicionar no ts-node-dex:
--respawn 
--transpile-only
--ignore-watch node_modules
-r : serve para executar um script antes dos outros.

-> Dentro do tsconfig.json:
"outDir": "./dist",
"rootDir": "./src",    
Faz com que, ao rodar o comando yarn tsc para transformar o codigo typescript em javascript, os arquivos sejam
adicionados ao diretorio especificado dentro da propriedade outDir. Por padrão os arquivos vão para dentro do ./src

Mudar o target para ES2017

-> typeRoots é usado para sobrescrever alguma tipagem que já vem por padrão

-> resolveJsonModule: Permite fazer importações dentro de um arquivo.

-> Instalar o módulo tsconfig-paths como dependência de desenvolvimento para evitar
o erro "Cannot find module '@controllers/UsersController'"
yarn add tsconfig-paths -D

====================== ESlint
-> instalar o ESlint como uma dependencia de desenvolvimento
yarn add eslint -D

-> Executar o comando de configuração do ESlint:
yarn eslint --init
Selecionar a 3º opção (To check syntax, find problems, and enforce code style)
Selecionar a 1º opção (Javascript modules (import/export))
Selecionar a 1º opção (Use a popular style guilde)

======================== JEST
-> instalar o módulo:
yarn add jest -D

-> Configurações: 
yarn jest --init

-> Adicionar o módulo para que o jest entendda TS:
yarn add ts-jest -D

-> Importar dentro de jest.config:
import { compilerOptions } from "./tsconfig.json";
import { pathsToModuleNameMapper } from "ts-jest";